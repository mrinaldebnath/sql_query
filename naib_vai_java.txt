package com.myExcel;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

import jxl.Cell;
import jxl.CellType;
import jxl.CellView;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;
import jxl.write.Formula;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

public class ReadExcel {

	private String inputFile;
	private String outputFile;
	private WritableCellFormat times;
	static int count;
	
	ReadExcel our;
	ReadExcel their;

	private HashMap CDRMap = new HashMap<String, Boolean>();
	
	
	
	public ReadExcel() {
		super();
	}

	public ReadExcel(ReadExcel our, ReadExcel their) {
		super();
		this.our = our;
		this.their = their;
	}

	public void setInputFile(String inputFile) {
		this.inputFile = inputFile;
		this.count = 0;
	}

	public void setOutputFile(String outputFile) {
		this.outputFile = outputFile;
	}

	public void read() throws IOException {
		File inputWorkbook = new File(inputFile);
		Workbook w;
		try {
			w = Workbook.getWorkbook(inputWorkbook);
			// Get the first sheet
			Sheet sheet = w.getSheet(0);
			// Loop over first 10 column and lines

			for (int i = 0; i < sheet.getRows(); i++) {
				Cell cell = sheet.getCell(0, i);
				CDRMap.put(cell.getContents(), true);
			}

		} catch (BiffException e) {
			e.printStackTrace();
		}
	}

	public void write() throws IOException, WriteException {
    	File file = new File(outputFile);
        WorkbookSettings wbSettings = new WorkbookSettings();

        wbSettings.setLocale(new Locale("en", "EN"));

        WritableWorkbook workbook = Workbook.createWorkbook(file,wbSettings);
        workbook.createSheet("result", 0);
        WritableSheet excelSheet = workbook.getSheet(0);
        createLabel(excelSheet);
        createContent(excelSheet);

        workbook.write();
        workbook.close();
    }

	private void createLabel(WritableSheet sheet) throws WriteException {
		// Lets create a times font
		WritableFont times10pt = new WritableFont(WritableFont.ARIAL, 10);
		// Define the cell format
		times = new WritableCellFormat(times10pt);

		CellView cv = new CellView();
		cv.setFormat(times);
		cv.setAutosize(true);
	}

	private void createContent(WritableSheet sheet) throws WriteException, RowsExceededException {
		Iterator it = their.CDRMap.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pair = (Map.Entry) it.next();

			String CDRString = (String) pair.getKey();

			int date_index = CDRString.substring(0, CDRString.lastIndexOf(" ")).lastIndexOf(" ") + 1;

			String onlyDate = CDRString.substring(date_index);
			Date theirDate = new Date();

			try {
				theirDate = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse(onlyDate);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			Date beforeTheirDate = new Date();
			beforeTheirDate.setTime(theirDate.getTime() - 1000);

			Date afterTheirDate = new Date();
			afterTheirDate.setTime(theirDate.getTime() + 1000);

			DateFormat reverse = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

			String beforeOnlyDate = reverse.format(beforeTheirDate);
			String afterOnlyDate = reverse.format(afterTheirDate);

			String beforeCDRString = null;
			String afterCDRString = null;

			beforeCDRString = CDRString.substring(0, date_index) + beforeOnlyDate;
			afterCDRString = CDRString.substring(0, date_index) + afterOnlyDate;

			if (our.CDRMap.containsKey(CDRString) || our.CDRMap.containsKey(beforeCDRString)
					|| our.CDRMap.containsKey(afterCDRString)) {
				continue;
			}

			try {
				addLabel(sheet,0, count++, CDRString);
			} catch (RowsExceededException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (WriteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			it.remove(); // avoids a ConcurrentModificationException
		}
	}
	
	private void addLabel(WritableSheet sheet, int column, int row, String s)
            throws WriteException, RowsExceededException {
    	jxl.write.Label label;
        label = new jxl.write.Label(column, row, s, times);
        sheet.addCell(label);
    }
	
	public static void main(String[] args) throws IOException {
		ReadExcel our = new ReadExcel();
		our.setInputFile("C:/office/naib vai/our.xls");
		our.read();

		ReadExcel their = new ReadExcel();
		their.setInputFile("C:/office/naib vai/their.xls");
		their.read();

		ReadExcel result = new ReadExcel(our,their);
		result.setOutputFile("C:/office/naib vai/result.xls");
		try {
			result.write();
		} catch (WriteException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

}